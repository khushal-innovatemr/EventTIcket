Install Stripe

npm install stripe

1.create route for payment intent response

        const paymentIntent = await stripe.paymentIntents.create({
            amount: total_cost,
            currency: "inr",
            metadata: {
                Event_id: Event_Id,
                userId: req.user.userId,
                Event_name: event.name,
            },
        });

2.Now create a route if there exists a stripe payment Intent then only we proceed to save the booking         

3.for the frontend first manage to get event id(either using url or save it to cookies/local storage and then proceed) and using stripe public key we loadStripe the card compoennet

async CurrentBooking(Event_Id: string, Ticket: number): Promise<void> {
    this.eventService.createPaymentIntent(Event_Id, Ticket).subscribe({
      next: async (res: any) => {
        this.Event_Id = Event_Id;
        this.events = res.data;
        this.tic = Ticket;
        this.booking_date = Date.now()
        this.paymentIntentId = res.data.paymentIntentId;
        await this.setupStripeElements(res.data.client_secret);
      },
      error: (err) => {
        console.error('Error creating payment intent:', err);
      }
    });
  }

  async setupStripeElements(clientSecret: string): Promise<void> {
    if (!this.stripe) {
      this.cardErrors = 'Stripe has not been initialized.';
      return;
    }

    const elements = this.stripe.elements();
    this.card = elements.create('card');
    this.card.mount('#card-element');

    this.card.on('change', (event: any) => {
      this.cardErrors = event.error ? event.error.message : '';
    });
  }

  async ConfirmBooking(): Promise<void> {
    this.isLoading = true;

    if (!this.stripe || !this.card) {
      this.cardErrors = 'Stripe or card information is not properly initialized.';
      this.isLoading = false;
      return;
    }

    try {
      const result = await this.stripe.confirmCardPayment(this.events.client_secret, {
        payment_method: { card: this.card }
      });

      if (result.error) {
        this.cardErrors = result.error.message;
      } else if (result.paymentIntent.status === 'succeeded') {
        this.eventService.confirmBooking(this.Event_Id, this.paymentIntentId, this.pathValue[2]).subscribe({
          next: (res: any) => {
            this.successmessage = 'âœ… Payment Successful! Redirecting...';
            setTimeout(() => {
              this.successmessage = '';
              this.router.navigate(['/user-view']);
            }, 3000);
          },
          error: (err) => {
            console.error('Error confirming booking:', err);
          }
        });
      }
    } catch (err: any) {
      console.error('Error processing payment:', err);
      this.cardErrors = 'Payment failed. Please try again.';
    } finally {
      this.isLoading = false;
    }
  }

4.  load the ts in the frontend
<div class="border p-4 rounded-lg bg-gray-50 shadow-lg">
    <div id="card-element" class="mb-2 border rounded-md p-2 text-sm StripeElement"></div>
    <div id="card-errors" role="alert" class="text-yellow-600 text-xl">{{cardErrors}}</div>
  </div>