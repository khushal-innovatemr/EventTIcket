Install Stripe

npm install stripe

create route for payment intent response
const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);

router.post('/create-payment-intent', verify, async (req, res) => {
    try {
        const { eventId, Ticket } = req.body;
        const event = await Event.findOne({ Event_id: eventId });

        if (!event) return res.status(404).json({ message: "Event not found" });

        const amount = event.ticket_price * Ticket * 100; // Convert to cents

        const paymentIntent = await stripe.paymentIntents.create({
            amount,
            currency: 'usd',
            metadata: { eventId, Ticket, userId: req.user.userId }
        });

        res.json({ clientSecret: paymentIntent.client_secret });
    } catch (error) {
        console.error('Error creating payment intent:', error);
        res.status(500).json({ message: 'Server error' });
    }
});


book.component.ts
import { HttpClient } from '@angular/common/http';
import { Component } from '@angular/core';
import { loadStripe } from '@stripe/stripe-js';

@Component({
    selector: 'app-book',
    templateUrl: './book.component.html',
})
export class BookComponent {
    stripePromise = loadStripe('your-publishable-key');

    constructor(private http: HttpClient) {}

    async bookTicket(eventId: string, Ticket: number) {
        this.http.post<{ clientSecret: string }>('http://localhost:5000/create-payment-intent', { eventId, Ticket })
            .subscribe(async (res) => {
                const stripe = await this.stripePromise;
                const { error } = await stripe!.redirectToCheckout({
                    sessionId: res.clientSecret,
                });
                if (error) console.error(error);
            });
    }
}


router.post('/webhook', express.raw({ type: 'application/json' }), async (req, res) => {
    const sig = req.headers['stripe-signature'];

    try {
        const event = stripe.webhooks.constructEvent(req.body, sig, process.env.STRIPE_WEBHOOK_SECRET);

        if (event.type === 'payment_intent.succeeded') {
            const { eventId, Ticket, userId } = event.data.object.metadata;

            const booking = new Booking({
                Booking_id: userId,
                Event_id: eventId,
                Ticket,
                status: 'approved'
            });

            await booking.save();
            console.log("Booking Confirmed!");
        }
        res.json({ received: true });
    } catch (err) {
        console.error("Webhook error:", err);
        res.status(400).send(`Webhook Error: ${err.message}`);
    }
});
webhook.js
